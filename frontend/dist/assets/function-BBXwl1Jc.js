const a=()=>{window.open("/api/auth/github","_self")},s=async({page:e=1,limit:r=10}={})=>{try{const t=await fetch(`/api/saved?page=${e}&limit=${r}`,{credentials:"include"}),o=await t.json();if(!t.ok)throw new Error(o.error||"Failed to fetch saved repos");return o}catch(t){throw t}},n=async e=>{try{const r=await fetch("/api/saved",{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({repo:e})}),t=await r.json();if(!r.ok)throw new Error(t.error||"Failed to save repository");return t}catch(r){throw r}},i=async e=>{try{const r=await fetch(`/api/saved/${encodeURIComponent(e)}`,{method:"DELETE",credentials:"include"}),t=await r.json();if(!r.ok)throw new Error(t.error||"Failed to remove saved repo");return t}catch(r){throw r}},c=async({page:e=1,limit:r=10}={})=>{try{const t=await fetch(`/api/starred?page=${e}&limit=${r}`,{credentials:"include"}),o=await t.json();if(!t.ok)throw new Error(o.error||"Failed to fetch starred repos");return o}catch(t){throw t}},d=async e=>{try{const r=await fetch("/api/starred",{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({repo:e})}),t=await r.json();if(!r.ok)throw new Error(t.error||"Failed to star repository");return t}catch(r){throw r}},h=async e=>{try{const r=await fetch(`/api/starred/${encodeURIComponent(e)}`,{method:"DELETE",credentials:"include"}),t=await r.json();if(!r.ok)throw new Error(t.error||"Failed to unstar repository");return t}catch(r){throw r}};export{c as a,d as b,s as f,a as h,i as r,n as s,h as u};
